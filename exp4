module sr(input s, r, clk, output reg q, qb);
initial q=1'b0;
always @(posedge clk) begin
   case({s,r})
      2'b00: q = q;
      2'b01: q = 1'b0;
      2'b10: q = 1'b1;
      2'b11: q = 1'bx;
    endcase
    qb = ~q;
   end
  endmodule




module d(d, q, qb, clk);

input d, clk;
output reg q, qb;

always @ (posedge clk)
begin
    case ({d})
        1'b0 : q = 0;
        1'b1 : q = 1;
    endcase
    qb = ~q;
  end




module jk(input j, k, clk, output reg q, qb);
initial q=1'b0;
always @(posedge clk) begin
   case({j,k})
      2'b00: q = q;
      2'b01: q = 1'b0;
      2'b10: q = 1'b1;
      2'b11: q = ~q;
    endcase
    qb = ~q;
   end
  endmodule
