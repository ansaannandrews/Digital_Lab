module sr(input s, r, clk, output reg q, qb);
initial q=1'b0;
always @(posedge clk) begin
   case({s,r})
      2'b00: q = q;
      2'b01: q = 1'b0;
      2'b10: q = 1'b1;
      2'b11: q = 1'bx;
    endcase
    qb = ~q;
   end
  endmodule




module d(input d, clk, output reg q, qb);
initial q=1'b0;
always @(posedge clk) begin
   case({d})
      1'b0: q = 0;
      1'b1: q = 1;
    endcase
    qb = ~q;
   end
  endmodule




module jk(input j, k, clk, output reg q, qb);
initial q=1'b0;
always @(posedge clk) begin
   case({j,k})
      2'b00: q = q;
      2'b01: q = 1'b0;
      2'b10: q = 1'b1;
      2'b11: q = ~q;
    endcase
    qb = ~q;
   end
  endmodule




module t(input t, clk, output reg q, qb);
initial q=1'b0;
always @(posedge clk) begin
   case({t})
      1'b0: q = 0;
      1'b1: q = ~q;
    endcase
    qb = ~q;
   end
  endmodule




module johnsons(input clk,output reg [3:0] q);
always @ (posedge clk) begin
    case(q)
       4'b0000 : q = 4'b1000;
       4'b1000 : q = 4'b1000;
       4'b1100 : q = 4'b1000;
       4'b1110 : q = 4'b1000;
       4'b1111 : q = 4'b1000;
       4'b0111 : q = 4'b1000;
       4'b0011 : q = 4'b1000;
       4'b0001 : q = 4'b1000;
      endcase
    end
 endmodule




module ring(input clk,output reg [3:0] q = 4'b1000);
always @ (posedge clk) begin
    case(q)
       4'b1000 : q = 4'b0100;
       4'b0100 : q = 4'b0010;
       4'b0010 : q = 4'b0001;
       4'b0001 : q = 4'b1000;
      endcase
    end
 endmodule
